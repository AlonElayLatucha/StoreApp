//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.VisualStudio.ServiceReference.Platforms, version 16.0.31613.86
// 
namespace StoreUWP.ServiceReference1 {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MemberInfo", Namespace="http://schemas.datacontract.org/2004/07/System.Reflection")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(StoreUWP.ServiceReference1.Type))]
    public partial class MemberInfo : object, System.ComponentModel.INotifyPropertyChanged {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Type", Namespace="http://schemas.datacontract.org/2004/07/System")]
    public partial class Type : StoreUWP.ServiceReference1.MemberInfo {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Item", Namespace="http://schemas.datacontract.org/2004/07/WcfServiceLibrary1.Model")]
    public partial class Item : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int itemIDField;
        
        private string itemNameField;
        
        private int priceField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int itemID {
            get {
                return this.itemIDField;
            }
            set {
                if ((this.itemIDField.Equals(value) != true)) {
                    this.itemIDField = value;
                    this.RaisePropertyChanged("itemID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string itemName {
            get {
                return this.itemNameField;
            }
            set {
                if ((object.ReferenceEquals(this.itemNameField, value) != true)) {
                    this.itemNameField = value;
                    this.RaisePropertyChanged("itemName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int price {
            get {
                return this.priceField;
            }
            set {
                if ((this.priceField.Equals(value) != true)) {
                    this.priceField = value;
                    this.RaisePropertyChanged("price");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Customer", Namespace="http://schemas.datacontract.org/2004/07/WcfServiceLibrary1.Model")]
    public partial class Customer : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int customerIDField;
        
        private string firstNameField;
        
        private string lastNameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int customerID {
            get {
                return this.customerIDField;
            }
            set {
                if ((this.customerIDField.Equals(value) != true)) {
                    this.customerIDField = value;
                    this.RaisePropertyChanged("customerID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string firstName {
            get {
                return this.firstNameField;
            }
            set {
                if ((object.ReferenceEquals(this.firstNameField, value) != true)) {
                    this.firstNameField = value;
                    this.RaisePropertyChanged("firstName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string lastName {
            get {
                return this.lastNameField;
            }
            set {
                if ((object.ReferenceEquals(this.lastNameField, value) != true)) {
                    this.lastNameField = value;
                    this.RaisePropertyChanged("lastName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SaleExtended", Namespace="http://schemas.datacontract.org/2004/07/WcfServiceLibrary1.Model")]
    public partial class SaleExtended : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string customerFirstNameField;
        
        private int customerIDField;
        
        private string customerLastNameField;
        
        private int idField;
        
        private int itemIDField;
        
        private string itemNameField;
        
        private int itemPriceField;
        
        private int quantityField;
        
        private string saleDateField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string customerFirstName {
            get {
                return this.customerFirstNameField;
            }
            set {
                if ((object.ReferenceEquals(this.customerFirstNameField, value) != true)) {
                    this.customerFirstNameField = value;
                    this.RaisePropertyChanged("customerFirstName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int customerID {
            get {
                return this.customerIDField;
            }
            set {
                if ((this.customerIDField.Equals(value) != true)) {
                    this.customerIDField = value;
                    this.RaisePropertyChanged("customerID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string customerLastName {
            get {
                return this.customerLastNameField;
            }
            set {
                if ((object.ReferenceEquals(this.customerLastNameField, value) != true)) {
                    this.customerLastNameField = value;
                    this.RaisePropertyChanged("customerLastName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int id {
            get {
                return this.idField;
            }
            set {
                if ((this.idField.Equals(value) != true)) {
                    this.idField = value;
                    this.RaisePropertyChanged("id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int itemID {
            get {
                return this.itemIDField;
            }
            set {
                if ((this.itemIDField.Equals(value) != true)) {
                    this.itemIDField = value;
                    this.RaisePropertyChanged("itemID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string itemName {
            get {
                return this.itemNameField;
            }
            set {
                if ((object.ReferenceEquals(this.itemNameField, value) != true)) {
                    this.itemNameField = value;
                    this.RaisePropertyChanged("itemName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int itemPrice {
            get {
                return this.itemPriceField;
            }
            set {
                if ((this.itemPriceField.Equals(value) != true)) {
                    this.itemPriceField = value;
                    this.RaisePropertyChanged("itemPrice");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int quantity {
            get {
                return this.quantityField;
            }
            set {
                if ((this.quantityField.Equals(value) != true)) {
                    this.quantityField = value;
                    this.RaisePropertyChanged("quantity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string saleDate {
            get {
                return this.saleDateField;
            }
            set {
                if ((object.ReferenceEquals(this.saleDateField, value) != true)) {
                    this.saleDateField = value;
                    this.RaisePropertyChanged("saleDate");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Sale", Namespace="http://schemas.datacontract.org/2004/07/WcfServiceLibrary1.Model")]
    public partial class Sale : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int customerIDField;
        
        private int idField;
        
        private int itemIDField;
        
        private int quantityField;
        
        private System.DateTime saleDateField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int customerID {
            get {
                return this.customerIDField;
            }
            set {
                if ((this.customerIDField.Equals(value) != true)) {
                    this.customerIDField = value;
                    this.RaisePropertyChanged("customerID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int id {
            get {
                return this.idField;
            }
            set {
                if ((this.idField.Equals(value) != true)) {
                    this.idField = value;
                    this.RaisePropertyChanged("id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int itemID {
            get {
                return this.itemIDField;
            }
            set {
                if ((this.itemIDField.Equals(value) != true)) {
                    this.itemIDField = value;
                    this.RaisePropertyChanged("itemID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int quantity {
            get {
                return this.quantityField;
            }
            set {
                if ((this.quantityField.Equals(value) != true)) {
                    this.quantityField = value;
                    this.RaisePropertyChanged("quantity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime saleDate {
            get {
                return this.saleDateField;
            }
            set {
                if ((this.saleDateField.Equals(value) != true)) {
                    this.saleDateField = value;
                    this.RaisePropertyChanged("saleDate");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.StoreInterface")]
    public interface StoreInterface {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/StoreInterface/AddToTable", ReplyAction="http://tempuri.org/StoreInterface/AddToTableResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(StoreUWP.ServiceReference1.Type))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(StoreUWP.ServiceReference1.MemberInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<StoreUWP.ServiceReference1.Item>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(StoreUWP.ServiceReference1.Item))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<StoreUWP.ServiceReference1.Customer>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(StoreUWP.ServiceReference1.Customer))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<StoreUWP.ServiceReference1.SaleExtended>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(StoreUWP.ServiceReference1.SaleExtended))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<StoreUWP.ServiceReference1.Sale>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(StoreUWP.ServiceReference1.Sale))]
        System.Threading.Tasks.Task<bool> AddToTableAsync(object itemVar);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/StoreInterface/SendSQLQuery", ReplyAction="http://tempuri.org/StoreInterface/SendSQLQueryResponse")]
        System.Threading.Tasks.Task<bool> SendSQLQueryAsync(string query);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/StoreInterface/RemoveAllFromTable", ReplyAction="http://tempuri.org/StoreInterface/RemoveAllFromTableResponse")]
        System.Threading.Tasks.Task<bool> RemoveAllFromTableAsync(StoreUWP.ServiceReference1.Type type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/StoreInterface/AddItem", ReplyAction="http://tempuri.org/StoreInterface/AddItemResponse")]
        System.Threading.Tasks.Task<bool> AddItemAsync(int id, string name, int price);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/StoreInterface/AddCustomer", ReplyAction="http://tempuri.org/StoreInterface/AddCustomerResponse")]
        System.Threading.Tasks.Task<bool> AddCustomerAsync(int id, string lastName, string firstName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/StoreInterface/AddSale", ReplyAction="http://tempuri.org/StoreInterface/AddSaleResponse")]
        System.Threading.Tasks.Task<bool> AddSaleAsync(int id, int itemID, int customerID, int quantity, System.DateTime saleDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/StoreInterface/SelectAllItems", ReplyAction="http://tempuri.org/StoreInterface/SelectAllItemsResponse")]
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<StoreUWP.ServiceReference1.Item>> SelectAllItemsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/StoreInterface/SelectAllCustomers", ReplyAction="http://tempuri.org/StoreInterface/SelectAllCustomersResponse")]
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<StoreUWP.ServiceReference1.Customer>> SelectAllCustomersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/StoreInterface/SelectAllSales", ReplyAction="http://tempuri.org/StoreInterface/SelectAllSalesResponse")]
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<StoreUWP.ServiceReference1.SaleExtended>> SelectAllSalesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/StoreInterface/SelectAllSalesByID", ReplyAction="http://tempuri.org/StoreInterface/SelectAllSalesByIDResponse")]
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<StoreUWP.ServiceReference1.Sale>> SelectAllSalesByIDAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/StoreInterface/SelectSales", ReplyAction="http://tempuri.org/StoreInterface/SelectSalesResponse")]
        System.Threading.Tasks.Task<bool> SelectSalesAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface StoreInterfaceChannel : StoreUWP.ServiceReference1.StoreInterface, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class StoreInterfaceClient : System.ServiceModel.ClientBase<StoreUWP.ServiceReference1.StoreInterface>, StoreUWP.ServiceReference1.StoreInterface {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public StoreInterfaceClient() : 
                base(StoreInterfaceClient.GetDefaultBinding(), StoreInterfaceClient.GetDefaultEndpointAddress()) {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_StoreInterface.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public StoreInterfaceClient(EndpointConfiguration endpointConfiguration) : 
                base(StoreInterfaceClient.GetBindingForEndpoint(endpointConfiguration), StoreInterfaceClient.GetEndpointAddress(endpointConfiguration)) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public StoreInterfaceClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(StoreInterfaceClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress)) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public StoreInterfaceClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(StoreInterfaceClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public StoreInterfaceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Threading.Tasks.Task<bool> AddToTableAsync(object itemVar) {
            return base.Channel.AddToTableAsync(itemVar);
        }
        
        public System.Threading.Tasks.Task<bool> SendSQLQueryAsync(string query) {
            return base.Channel.SendSQLQueryAsync(query);
        }
        
        public System.Threading.Tasks.Task<bool> RemoveAllFromTableAsync(StoreUWP.ServiceReference1.Type type) {
            return base.Channel.RemoveAllFromTableAsync(type);
        }
        
        public System.Threading.Tasks.Task<bool> AddItemAsync(int id, string name, int price) {
            return base.Channel.AddItemAsync(id, name, price);
        }
        
        public System.Threading.Tasks.Task<bool> AddCustomerAsync(int id, string lastName, string firstName) {
            return base.Channel.AddCustomerAsync(id, lastName, firstName);
        }
        
        public System.Threading.Tasks.Task<bool> AddSaleAsync(int id, int itemID, int customerID, int quantity, System.DateTime saleDate) {
            return base.Channel.AddSaleAsync(id, itemID, customerID, quantity, saleDate);
        }
        
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<StoreUWP.ServiceReference1.Item>> SelectAllItemsAsync() {
            return base.Channel.SelectAllItemsAsync();
        }
        
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<StoreUWP.ServiceReference1.Customer>> SelectAllCustomersAsync() {
            return base.Channel.SelectAllCustomersAsync();
        }
        
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<StoreUWP.ServiceReference1.SaleExtended>> SelectAllSalesAsync() {
            return base.Channel.SelectAllSalesAsync();
        }
        
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<StoreUWP.ServiceReference1.Sale>> SelectAllSalesByIDAsync(int id) {
            return base.Channel.SelectAllSalesByIDAsync(id);
        }
        
        public System.Threading.Tasks.Task<bool> SelectSalesAsync() {
            return base.Channel.SelectSalesAsync();
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync() {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync() {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_StoreInterface)) {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_StoreInterface)) {
                return new System.ServiceModel.EndpointAddress("http://localhost:8733/Design_Time_Addresses/WcfServiceLibrary1/Service1/");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding() {
            return StoreInterfaceClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_StoreInterface);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress() {
            return StoreInterfaceClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_StoreInterface);
        }
        
        public enum EndpointConfiguration {
            
            BasicHttpBinding_StoreInterface,
        }
    }
}
